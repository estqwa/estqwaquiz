package websocket

import (
	"encoding/json"
	"log"
	"sync"
	"time"

	"github.com/gorilla/websocket"
)

// Hub –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
// –≠—Ç–æ —Å—Ç–∞—Ä—ã–π Hub, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –ù–æ–≤—ã–º –∫–æ–¥–æ–º —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ShardedHub
type Hub struct {
	// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
	clients map[*Client]bool

	// –ö–∞–Ω–∞–ª –¥–ª—è –≤—Ö–æ–¥—è—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
	register chan *Client

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
	unregister chan *Client

	// –ö–∞–Ω–∞–ª –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	broadcast chan []byte

	// –ú–∞–ø–ø–∏–Ω–≥ UserID -> Client –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	userMap map[string]*Client

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
	mu sync.RWMutex

	// –ö–∞–Ω–∞–ª—ã —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
	registrationComplete map[*Client]chan struct{}

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
	registrationMu sync.RWMutex

	// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ñ–æ–Ω–æ–≤—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω
	done chan struct{}

	// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	metrics struct {
		totalConnections       int64
		activeConnections      int64
		messagesSent           int64
		messagesReceived       int64
		connectionErrors       int64
		inactiveClientsRemoved int64
		startTime              time.Time
		lastCleanupTime        time.Time

		// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
		mu sync.RWMutex
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º, —á—Ç–æ Hub —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å HubInterface
var _ HubInterface = (*Hub)(nil)

// NewHub —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Hub
// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –Ω–æ–≤–æ–º—É –∫–æ–¥—É —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ShardedHub
func NewHub() *Hub {
	log.Println("–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π Hub. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ ShardedHub –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 10,000+ –∫–ª–∏–µ–Ω—Ç–æ–≤.")

	hub := &Hub{
		broadcast:            make(chan []byte),
		register:             make(chan *Client),
		unregister:           make(chan *Client),
		clients:              make(map[*Client]bool),
		userMap:              make(map[string]*Client),
		registrationComplete: make(map[*Client]chan struct{}),
		done:                 make(chan struct{}),
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
	hub.metrics.startTime = time.Now()

	return hub
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Hub
func (h *Hub) Run() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	go h.RunCleanupRoutine()

	for {
		select {
		case client := <-h.register:
			h.mu.Lock()

			// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
			h.metrics.mu.Lock()
			h.metrics.totalConnections++
			h.metrics.activeConnections++
			h.metrics.mu.Unlock()

			if oldClient, exists := h.userMap[client.UserID]; exists && oldClient != client {
				log.Printf("Hub: detected existing connection for client %s", client.UserID)
				log.Println("WebSocket: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è UserID", client.UserID)

				// üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ–º
				err := oldClient.conn.WriteMessage(websocket.PingMessage, nil)
				if err != nil {
					log.Printf("Hub: detected inactive client %s, closing...", client.UserID)
					delete(h.clients, oldClient)
					delete(h.userMap, client.UserID)
					if oldClient.conn != nil {
						oldClient.conn.Close()
					}
					close(oldClient.send)

					// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
					h.metrics.mu.Lock()
					h.metrics.activeConnections--
					h.metrics.connectionErrors++
					h.metrics.mu.Unlock()
				} else {
					log.Printf("Hub: replacing existing active client %s with new connection", client.UserID)
					// –£–ª—É—á—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–º–µ–Ω—ã: —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç,
					// –∞ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

					// 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
					h.clients[client] = true
					h.userMap[client.UserID] = client
					client.lastActivity = time.Now()

					// 2. –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
					oldClientCopy := oldClient // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –≥–æ–Ω–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
					go func(oldClient *Client) {
						// –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º, —á—Ç–æ–±—ã –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
						time.Sleep(500 * time.Millisecond)

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
						h.mu.Lock()
						_, stillExists := h.clients[oldClient]
						if stillExists {
							delete(h.clients, oldClient)
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–∞—Ä—Ç–µ userMap –≤—Å–µ –µ—â–µ —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç
							if h.userMap[oldClient.UserID] == oldClient {
								delete(h.userMap, oldClient.UserID)
							}

							// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
							h.metrics.mu.Lock()
							h.metrics.activeConnections--
							h.metrics.mu.Unlock()

							// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª
							if oldClient.conn != nil {
								oldClient.conn.Close()
							}
							close(oldClient.send)
							log.Printf("Hub: delayed close of old client %s completed", oldClient.UserID)
						}
						h.mu.Unlock()
					}(oldClientCopy)

					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∏–∂–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
					h.mu.Unlock()

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					h.registrationMu.RLock()
					if signalChan, ok := h.registrationComplete[client]; ok {
						select {
						case signalChan <- struct{}{}:
							log.Printf("Hub: sent registration completion signal to client %s", client.UserID)
						default:
							log.Printf("Hub: failed to send registration completion signal to client %s (channel buffer full)", client.UserID)
						}
					}
					h.registrationMu.RUnlock()

					return
				}
			}

			// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
			h.clients[client] = true
			h.userMap[client.UserID] = client
			client.lastActivity = time.Now()
			log.Printf("Hub: client %s registered, total clients: %d", client.UserID, len(h.clients))
			h.mu.Unlock()

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			h.registrationMu.RLock()
			if signalChan, ok := h.registrationComplete[client]; ok {
				select {
				case signalChan <- struct{}{}:
					log.Printf("Hub: sent registration completion signal to client %s", client.UserID)
				default:
					log.Printf("Hub: failed to send registration completion signal to client %s (channel buffer full)", client.UserID)
				}
			}
			h.registrationMu.RUnlock()

		case client := <-h.unregister:
			h.mu.Lock()
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				delete(h.userMap, client.UserID)
				log.Printf("Hub: client %s unregistered, total clients: %d", client.UserID, len(h.clients))

				// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
				h.metrics.mu.Lock()
				h.metrics.activeConnections--
				h.metrics.mu.Unlock()

				// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ
				if client.conn != nil {
					client.conn.Close()
				}

				close(client.send)
			}
			h.mu.Unlock()

		case message := <-h.broadcast:
			// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø –∏ –ø–æ–¥–ø–∏—Å–∫—É
			var event Event
			err := json.Unmarshal(message, &event)
			shouldFilter := (err == nil) // –§–∏–ª—å—Ç—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Event

			h.mu.RLock()
			for client := range h.clients {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ Event
				if shouldFilter {
					if !client.IsSubscribed(event.Type) {
						// log.Printf("[Hub Broadcast Skip] Client %s is not subscribed to %s", client.UserID, event.Type)
						continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
					}
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
				select {
				case client.send <- message:
					// –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å)
				default:
					// –ö–∞–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç
					log.Printf("Hub: –∫–∞–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞ %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞", client.ConnectionID)
					// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –º—ã —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
					h.mu.RUnlock() // –û—Ç–ø—É—Å–∫–∞–µ–º RLock –ø–µ—Ä–µ–¥ –∑–∞—Ö–≤–∞—Ç–æ–º Lock
					h.mu.Lock()
					close(client.send)
					delete(h.clients, client)
					// –£–¥–∞–ª—è–µ–º –∏ –∏–∑ userMap
					if _, ok := h.userMap[client.UserID]; ok {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ UserID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
						if h.userMap[client.UserID] == client {
							delete(h.userMap, client.UserID)
						}
					}
					h.mu.Unlock()
					h.mu.RLock() // –°–Ω–æ–≤–∞ –±–µ—Ä–µ–º RLock –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –≤—ã—Ö–æ–¥–∏–º)
					// –í–∞–∂–Ω–æ: –ø–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ–¥ Lock, –∏—Ç–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π
					// –ù–æ –≤ Go –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–æ–±—ã—á–Ω–æ),
					// —Ç–∞–∫ —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ù–æ –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º.
					// –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞.
				}
			}
			h.mu.RUnlock()

		case <-h.done:
			log.Printf("Hub: cleanup routine stopped")
			return
		}
	}
}

// RunCleanupRoutine –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (h *Hub) RunCleanupRoutine() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	log.Printf("Hub: started cleanup routine")

	for {
		select {
		case <-ticker.C:
			h.mu.Lock()

			// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
			h.metrics.mu.Lock()
			h.metrics.lastCleanupTime = time.Now()
			h.metrics.mu.Unlock()

			log.Printf("Hub: running cleanup check, current clients: %d", len(h.clients))
			now := time.Now()
			inactiveCount := 0

			for client := range h.clients {
				// –ó–∞—â–∏—Ç–∞ –æ—Ç nil-–∫–ª–∏–µ–Ω—Ç–æ–≤
				if client == nil {
					continue
				}

				// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
				if client.lastActivity.Add(10 * time.Minute).Before(now) {
					log.Printf("Hub: cleanup - closing inactive client %s (last active: %v)",
						client.UserID, client.lastActivity.Format(time.RFC3339))

					delete(h.clients, client)
					delete(h.userMap, client.UserID)

					if client.conn != nil {
						client.conn.Close()
					}

					close(client.send)
					inactiveCount++
				}
			}

			if inactiveCount > 0 {
				h.metrics.mu.Lock()
				h.metrics.inactiveClientsRemoved += int64(inactiveCount)
				h.metrics.activeConnections -= int64(inactiveCount)
				h.metrics.mu.Unlock()

				log.Printf("Hub: cleanup removed %d inactive clients, remaining: %d",
					inactiveCount, len(h.clients))
			}

			h.mu.Unlock()

		case <-h.done:
			log.Printf("Hub: cleanup routine stopped")
			return
		}
	}
}

// GetMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ö–∞–±–∞.
func (h *Hub) GetMetrics() map[string]interface{} {
	h.metrics.mu.RLock()
	defer h.metrics.mu.RUnlock()

	uptime := time.Since(h.metrics.startTime).Seconds()

	return map[string]interface{}{
		"type":                     "single", // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ö–∞–±–∞
		"total_connections":        h.metrics.totalConnections,
		"active_connections":       h.ClientCount(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º ClientCount()
		"messages_sent":            h.metrics.messagesSent,
		"messages_received":        h.metrics.messagesReceived,
		"connection_errors":        h.metrics.connectionErrors,
		"inactive_clients_removed": h.metrics.inactiveClientsRemoved,
		"uptime_seconds":           uptime,
		"last_cleanup":             h.metrics.lastCleanupTime.Format(time.RFC3339),
	}
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –≥–æ—Ä—É—Ç–∏–Ω—ã Hub
func (h *Hub) Close() {
	close(h.done)

	h.mu.Lock()
	for client := range h.clients {
		if client.conn != nil {
			client.conn.Close()
		}
		close(client.send)
	}

	// –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
	h.clients = make(map[*Client]bool)
	h.userMap = make(map[string]*Client)
	h.mu.Unlock()

	h.registrationMu.Lock()
	h.registrationComplete = make(map[*Client]chan struct{})
	h.registrationMu.Unlock()

	log.Printf("Hub: closed")
}

// RegisterSync —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (h *Hub) RegisterSync(client *Client, done chan struct{}) {
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Ö–∞–±–∞
	syncChan := make(chan struct{}, 1)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Hub
	h.registrationMu.Lock()
	h.registrationComplete[client] = syncChan
	h.registrationMu.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	h.register <- client

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	select {
	case <-syncChan:
		log.Printf("Hub: client %s successfully registered", client.UserID)
	case <-time.After(3 * time.Second): // –î–∞–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
		log.Printf("Hub: timeout while registering client %s - possible race condition", client.UserID)
	}

	// –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
	h.registrationMu.Lock()
	delete(h.registrationComplete, client)
	h.registrationMu.Unlock()

	// –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ StartPumps
	done <- struct{}{}
}

// RegisterClient —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
func (h *Hub) RegisterClient(client *Client) {
	h.register <- client
}

// UnregisterClient –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
func (h *Hub) UnregisterClient(client *Client) {
	h.unregister <- client
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (h *Hub) Broadcast(message []byte) {
	h.broadcast <- message
}

// BroadcastJSON –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (h *Hub) BroadcastJSON(v interface{}) error {
	data, err := json.Marshal(v)
	if err != nil {
		return err
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
	h.mu.RLock()
	clientCount := len(h.clients)
	h.mu.RUnlock()

	log.Printf("Hub: broadcasting message to %d clients: %s", clientCount, string(data[:min(200, len(data))]))

	h.broadcast <- data
	return nil
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// SendToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Hub) SendToUser(userID string, message []byte) bool {
	h.mu.RLock()
	client, exists := h.userMap[userID]
	h.mu.RUnlock()

	if exists {
		log.Printf("Hub: sending message to user %s: %s", userID, string(message))
		select {
		case client.send <- message:
			return true
		default:
			log.Printf("Hub: failed to send message to user %s, buffer full", userID)
			h.mu.Lock()
			delete(h.clients, client)
			delete(h.userMap, userID)
			close(client.send)
			h.mu.Unlock()
			return false
		}
	}
	log.Printf("Hub: user %s not found", userID)
	return false
}

// SendJSONToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (h *Hub) SendJSONToUser(userID string, v interface{}) error {
	data, err := json.Marshal(v)
	if err != nil {
		log.Printf("Hub: error marshaling JSON for user %s: %v", userID, err)
		return err
	}
	if !h.SendToUser(userID, data) {
		log.Printf("Hub: failed to send JSON to user %s", userID)
		return err
	}
	return nil
}

// ClientCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
func (h *Hub) ClientCount() int {
	h.mu.RLock()
	defer h.mu.RUnlock()
	return len(h.clients)
}
